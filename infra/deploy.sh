#!/bin/bash

# Ground Truth Curation App - Azure Infrastructure Deployment Script
# This script deploys the Azure infrastructure for the hackathon

set -e  # Exit on any error

# Configuration
RESOURCE_GROUP="ground-truth-app-rg"
LOCATION="westus2"
TEMPLATE_FILE="main.bicep"
PARAMETERS_FILE="main.parameters.json"

echo "🚀 Starting deployment of Ground Truth Curation App infrastructure..."
echo "📍 Resource Group: $RESOURCE_GROUP"
echo "🌍 Location: $LOCATION"
echo ""

# Check if Azure CLI is installed
if ! command -v az &> /dev/null; then
    echo "❌ Azure CLI is not installed. Please install it first:"
    echo "   https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
    exit 1
fi

# Check if user is logged in
echo "🔐 Checking Azure CLI authentication..."
if ! az account show &> /dev/null; then
    echo "❌ Please log in to Azure CLI first:"
    echo "   az login"
    exit 1
fi

# Load environment variables from .env file
if [ -f .env ]; then
    echo "📄 Loading environment variables from .env file..."
    export $(cat .env | grep -v '^#' | xargs)
else
    echo "⚠️  No .env file found. Please create one with SQL_ADMIN_PASSWORD variable."
    echo "   Example: echo 'SQL_ADMIN_PASSWORD=YourSecurePassword123!' > .env"
    exit 1
fi

# Check if SQL password is set
if [ -z "$SQL_ADMIN_PASSWORD" ]; then
    echo "❌ SQL_ADMIN_PASSWORD not found in .env file"
    echo "   Please add: SQL_ADMIN_PASSWORD=YourSecurePassword123!"
    exit 1
fi

# Show current subscription
SUBSCRIPTION=$(az account show --query name -o tsv)
echo "✅ Logged in to Azure subscription: $SUBSCRIPTION"
echo ""

# Create resource group (will skip if exists)
echo "📦 Creating resource group '$RESOURCE_GROUP' in '$LOCATION'..."
az group create --name "$RESOURCE_GROUP" --location "$LOCATION" --output table

echo ""
echo "🏗️  Deploying infrastructure..."

# Deploy Bicep template with incremental mode (skips existing resources)
DEPLOYMENT_NAME="ground-truth-deployment-$(date +%Y%m%d-%H%M%S)"
az deployment group create \
    --resource-group "$RESOURCE_GROUP" \
    --template-file "$TEMPLATE_FILE" \
    --parameters @"$PARAMETERS_FILE" \
    --parameters sqlAdministratorPassword="$SQL_ADMIN_PASSWORD" \
    --name "$DEPLOYMENT_NAME" \
    --mode Incremental \
    --output table

echo ""
echo "✅ Infrastructure deployment completed!"

# Get deployment outputs
echo "📋 Getting deployment information..."
SYSTEM_SQL_SERVER=$(az deployment group show \
    --resource-group "$RESOURCE_GROUP" \
    --name "$DEPLOYMENT_NAME" \
    --query properties.outputs.systemSqlServerFqdn.value -o tsv)

GROUND_TRUTH_SQL_SERVER=$(az deployment group show \
    --resource-group "$RESOURCE_GROUP" \
    --name "$DEPLOYMENT_NAME" \
    --query properties.outputs.groundTruthSqlServerFqdn.value -o tsv)

SYSTEM_DATABASE=$(az deployment group show \
    --resource-group "$RESOURCE_GROUP" \
    --name "$DEPLOYMENT_NAME" \
    --query properties.outputs.systemDatabaseName.value -o tsv)

GROUND_TRUTH_DATABASE=$(az deployment group show \
    --resource-group "$RESOURCE_GROUP" \
    --name "$DEPLOYMENT_NAME" \
    --query properties.outputs.groundTruthDatabaseName.value -o tsv)

COSMOS_ACCOUNT=$(az deployment group show \
    --resource-group "$RESOURCE_GROUP" \
    --name "$DEPLOYMENT_NAME" \
    --query properties.outputs.cosmosDbAccountName.value -o tsv)

COSMOS_ENDPOINT=$(az deployment group show \
    --resource-group "$RESOURCE_GROUP" \
    --name "$DEPLOYMENT_NAME" \
    --query properties.outputs.cosmosDbAccountEndpoint.value -o tsv)

COSMOS_DATABASE=$(az deployment group show \
    --resource-group "$RESOURCE_GROUP" \
    --name "$DEPLOYMENT_NAME" \
    --query properties.outputs.cosmosDbDatabaseName.value -o tsv)

# Get Cosmos DB primary key for authentication
COSMOS_PRIMARY_KEY=$(az cosmosdb keys list \
    --resource-group "$RESOURCE_GROUP" \
    --name "$COSMOS_ACCOUNT" \
    --type keys \
    --query primaryMasterKey -o tsv)

# Update .env file with deployed infrastructure details
echo "📝 Updating .env file with deployment details..."
if [ -f .env ]; then
    # Create a backup
    cp .env .env.backup
    
    # Update SQL Server connection details (for CSV imports)
    sed -i.tmp "s|^DB_SERVER=.*|DB_SERVER=$SYSTEM_SQL_SERVER|" .env
    sed -i.tmp "s|^DB_DATABASE=.*|DB_DATABASE=$SYSTEM_DATABASE|" .env
    
    # Add or update additional deployment information
    # Remove any existing deployment info section
    sed -i.tmp '/^# === DEPLOYMENT INFO ===/,/^# === END DEPLOYMENT INFO ===/d' .env
    
    # Add new deployment info section
    cat >> .env << EOF

# === DEPLOYMENT INFO ===
# Auto-generated by deploy.sh on $(date)

# System SQL Server (for support tickets and demo data)
SYSTEM_SQL_SERVER=$SYSTEM_SQL_SERVER
SYSTEM_DATABASE=$SYSTEM_DATABASE

# Ground Truth SQL Server (for curation workflow)
GROUND_TRUTH_SQL_SERVER=$GROUND_TRUTH_SQL_SERVER
GROUND_TRUTH_DATABASE=$GROUND_TRUTH_DATABASE

# Cosmos DB (for manufacturing defects)
COSMOS_ACCOUNT=$COSMOS_ACCOUNT
COSMOS_ENDPOINT=$COSMOS_ENDPOINT
COSMOS_DATABASE=$COSMOS_DATABASE
COSMOS_PRIMARY_KEY=$COSMOS_PRIMARY_KEY
COSMOS_CONNECTION_STRING=AccountEndpoint=$COSMOS_ENDPOINT;AccountKey=$COSMOS_PRIMARY_KEY;Database=$COSMOS_DATABASE;

# Azure Resource Details
AZURE_RESOURCE_GROUP=$RESOURCE_GROUP
AZURE_LOCATION=$LOCATION
DEPLOYMENT_NAME=$DEPLOYMENT_NAME
# === END DEPLOYMENT INFO ===
EOF
    
    rm -f .env.tmp
    
    echo "✅ Updated .env file with:"
    echo "   DB_SERVER=$SYSTEM_SQL_SERVER"
    echo "   DB_DATABASE=$SYSTEM_DATABASE"
    echo "   + Cosmos DB connection details"
    echo "   + All deployment resource details"
    echo "   📄 Backup saved as .env.backup"
else
    echo "⚠️  .env file not found - skipping update"
fi

echo ""
echo "🎉 Deployment Summary:"
echo "=================================="
echo "System SQL Server: $SYSTEM_SQL_SERVER"
echo "System Database: $SYSTEM_DATABASE"
echo "Ground Truth SQL Server: $GROUND_TRUTH_SQL_SERVER"
echo "Ground Truth Database: $GROUND_TRUTH_DATABASE"
echo "Cosmos DB Account: $COSMOS_ACCOUNT"
echo "Cosmos DB Endpoint: $COSMOS_ENDPOINT"
echo "Cosmos DB Database: $COSMOS_DATABASE"
echo "Cosmos DB Primary Key: ${COSMOS_PRIMARY_KEY:0:20}..." # Show only first 20 chars for security
echo "Resource Group: $RESOURCE_GROUP"
echo "Location: $LOCATION"
echo ""
echo "📝 Next Steps:"
echo "1. Run the table creation script: create-support-tickets-table.sql"
echo "2. Import CSV data using: python import-support-tickets-csv.py"
echo "3. Upload defects data using: python upload-defects-csv.py"
echo "4. Update connection strings in your applications"
echo ""
echo "🔧 Connection Details:"
echo "System SQL Server: $SYSTEM_SQL_SERVER"
echo "System Database: $SYSTEM_DATABASE (for support tickets)"
echo "Ground Truth SQL Server: $GROUND_TRUTH_SQL_SERVER"
echo "Ground Truth Database: $GROUND_TRUTH_DATABASE (for curation data)"
echo "Cosmos DB Endpoint: $COSMOS_ENDPOINT"
echo "Cosmos DB Database: $COSMOS_DATABASE (for manufacturing defects)"
echo "Authentication: SQL Server (username/password), Cosmos DB (primary key in .env)"
echo ""
echo "💰 Billing Note: Cosmos DB is configured for serverless (consumption-based)"
echo "   You only pay for Request Units (RUs) consumed and storage used."
echo ""
echo "⚠️  Security Note: This deployment uses hackathon-friendly settings"
echo "   (open firewall, public access). Review security for production use."